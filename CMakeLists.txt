cmake_minimum_required (VERSION 3.8)

project (packetLossUtils CXX)

# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed.
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)

set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${PROJECT_SOURCE_DIR}/cmake/")
SET(PACKETLOSSUTILS_CMAKE_SEARCH_PATH "C:/Qt/5.15.2/msvc2019_64" CACHE PATH "Additional Qt5 search path" )

# SpdLog base path, included via GIT Submodule
set(SPDLOG_MODULE_BASEPATH "${PROJECT_SOURCE_DIR}/3rdparty/spdlog")

SET(CMAKE_PREFIX_PATH "${PACKETLOSSUTILS_CMAKE_SEARCH_PATH}/lib/cmake/")

# Find the Qt library
if (NOT APPLE)
	find_package(Qt5Core REQUIRED)
	find_package(Qt5Network REQUIRED)
else()
	find_package(Qt5Core REQUIRED HINTS /usr/local/Cellar/qt/*/lib/cmake ENV PATH)
	find_package(Qt5Network REQUIRED HINTS /usr/local/Cellar/qt/*/lib/cmake ENV PATH)
	find_package(Qt5MacExtras REQUIRED HINTS /usr/local/Cellar/qt/*/lib/cmake ENV PATH)
endif()

# Add SpgLog Includes
include_directories("${SPDLOG_MODULE_BASEPATH}/include")

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	message(STATUS "Compiler is GNU g++")
	# Set standard flags for GCC
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -funroll-loops -O4 -fvisibility=hidden")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++20 -Wall -Wextra -Wold-style-cast -pedantic")
	set(CMAKE_CXX_STANDARD 20)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	message(STATUS "Compiler is MSVC")
	set (CMAKE_CXX_STANDARD 20)
	set (CMAKE_CXX_STANDARD_REQUIRED ON)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL")
	set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
	
	add_definitions(/D_CRT_SECURE_NO_WARNINGS)
	add_definitions(/DNOMINMAX)
	add_definitions(/DWIN32_LEAN_AND_MEAN)
else(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
	message(STATUS "Compiler is Clang")
	# As CLANG is not set as a variable, we need to set it in case we have not matched another compiler.
	set (CLANG ON)
	# Set standard flags for clang
	set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -funroll-loops -O3")
	if(UNIX AND NOT APPLE AND NOT USE_LIBCXX)
		set(CLANG_STDLIB libstdc++)
	else()
		set(CLANG_STDLIB libc++)
		# Set up some Xcode specific settings
		set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++20")
		set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
	endif()
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++20 -stdlib=${CLANG_STDLIB} -Wall -pedantic -Wno-unused-variable -ftemplate-depth=1024")
	set (CMAKE_CXX_STANDARD 20)
	set (CMAKE_CXX_STANDARD_REQUIRED ON)
endif()

#
# Make a version file containing the current version from git.
#

# First check if this is a Git checkout or if a custom version tag should be used.
if ((NOT "${PACKETLOSSUTILS_CUSTOM_VERSION_STRING}" STREQUAL "") AND (NOT "${PACKETLOSSUTILS_CUSTOM_VERSION_STRING}" MATCHES "^[0-9]+\\.[0-9]+\\.[0-9]+\\-[0-9]+\\-[a-z0-9]+(\\-.*)?$"))
	message(FATAL_ERROR "Builtin version information: A custom version string is set, but it is malformed. Should be: 0.1.2-34-567890ab, i.e. major.minor.patch-commitsSinceTag-shortHash")
endif()

set(PACKETLOSSUTILS_GIT_VERSION_STRING "")
if (NOT "${PACKETLOSSUTILS_CUSTOM_VERSION_STRING}" STREQUAL "")
	message(STATUS "Builtin version information: custom version string set, using ${PACKETLOSSUTILS_CUSTOM_VERSION_STRING}")
	set(PACKETLOSSUTILS_GIT_VERSION_STRING "${PACKETLOSSUTILS_CUSTOM_VERSION_STRING}")
elseif (NOT EXISTS "${PROJECT_SOURCE_DIR}/.git")
	message(STATUS "Builtin version information: .git folder non-existant, falling back to 0.0.0-0-00000000")
	set(PACKETLOSSUTILS_GIT_VERSION_STRING "0.0.0-0-00000000")
else()
	message(STATUS "Builtin version information: .git folder exists, using git_describe_checkout")
	include(GetGitRevisionDescription)
	git_describe_checkout(PACKETLOSSUTILS_GIT_VERSION_STRING)
endif()

if ("${PACKETLOSSUTILS_GIT_VERSION_STRING}" MATCHES "^[0-9]+\\.[0-9]+\\.[0-9]+\\-[0-9]+\\-[a-z0-9]+(\\-.*)?$")
	# Parse the git Tag into variables
	string(REGEX REPLACE "^([0-9]+)\\..*" "\\1" PACKETLOSSUTILS_CPP_VERSION_MAJOR "${PACKETLOSSUTILS_GIT_VERSION_STRING}")
	string(REGEX REPLACE "^[0-9]+\\.([0-9]+).*" "\\1" PACKETLOSSUTILS_CPP_VERSION_MINOR "${PACKETLOSSUTILS_GIT_VERSION_STRING}")
	string(REGEX REPLACE "^[0-9]+\\.[0-9]+\\.([0-9]+).*" "\\1" PACKETLOSSUTILS_CPP_VERSION_PATCH "${PACKETLOSSUTILS_GIT_VERSION_STRING}")
	string(REGEX REPLACE "^[0-9]+\\.[0-9]+\\.[0-9]+\\-([0-9]+)\\-.*" "\\1" PACKETLOSSUTILS_CPP_VERSION_COMMITS_AHEAD "${PACKETLOSSUTILS_GIT_VERSION_STRING}")
	string(REGEX REPLACE "^[0-9]+\\.[0-9]+\\.[0-9]+\\-[0-9]+\\-([a-z0-9]+).*" "\\1" PACKETLOSSUTILS_CPP_VERSION_HASH "${PACKETLOSSUTILS_GIT_VERSION_STRING}")
	string(REGEX REPLACE "^[0-9]+\\.[0-9]+\\.[0-9]+\\-[0-9]+\\-[a-z0-9]+\\-(.*)" "\\1" PACKETLOSSUTILS_CPP_VERSION_APPENDIX "${PACKETLOSSUTILS_GIT_VERSION_STRING}")
	if ("${PACKETLOSSUTILS_CPP_VERSION_APPENDIX}" MATCHES "^.*dirty.*$")
		set(PACKETLOSSUTILS_CPP_VERSION_DIRTY 1)
	else()
		set(PACKETLOSSUTILS_CPP_VERSION_DIRTY 0)
	endif()
message(STATUS "PacketLossUtils - Version information: ${PACKETLOSSUTILS_CPP_VERSION_MAJOR}.${PACKETLOSSUTILS_CPP_VERSION_MINOR}.${PACKETLOSSUTILS_CPP_VERSION_PATCH} (${PACKETLOSSUTILS_CPP_VERSION_COMMITS_AHEAD} commits ahead of Tag) build from ${PACKETLOSSUTILS_CPP_VERSION_HASH} (Dirty: ${PACKETLOSSUTILS_CPP_VERSION_DIRTY})")
else()
	message(STATUS "No GIT support, no tags fetched or other problems. Defaulting to version 0.0.0-0-00000000 (result was ${PACKETLOSSUTILS_GIT_VERSION_STRING})")
	set(PACKETLOSSUTILS_CPP_VERSION_MAJOR 0)
	set(PACKETLOSSUTILS_CPP_VERSION_MINOR 0)
	set(PACKETLOSSUTILS_CPP_VERSION_PATCH 0)
	set(PACKETLOSSUTILS_CPP_VERSION_COMMITS_AHEAD 0)
	set(PACKETLOSSUTILS_CPP_VERSION_HASH "00000000")
	set(PACKETLOSSUTILS_CPP_VERSION_DIRTY 0)
endif()

# Generate a version string
set(PACKETLOSSUTILS_VERSION_NUM "${PACKETLOSSUTILS_CPP_VERSION_MAJOR}.${PACKETLOSSUTILS_CPP_VERSION_MINOR}.${PACKETLOSSUTILS_CPP_VERSION_PATCH}")
set(PACKETLOSSUTILS_VERSION "${PACKETLOSSUTILS_CPP_VERSION_MAJOR}.${PACKETLOSSUTILS_CPP_VERSION_MINOR}.${PACKETLOSSUTILS_CPP_VERSION_PATCH}")
if (PACKETLOSSUTILS_CPP_VERSION_COMMITS_AHEAD GREATER 0)
	set(PACKETLOSSUTILS_VERSION "${PACKETLOSSUTILS_VERSION}+${PACKETLOSSUTILS_CPP_VERSION_COMMITS_AHEAD}")
endif()
set(PACKETLOSSUTILS_VERSION "${PACKETLOSSUTILS_VERSION}-${PACKETLOSSUTILS_CPP_VERSION_HASH}")

# Check for %zu support
try_run(PACKETLOSSUTILS_POINTER_SIZE_TEST_RUN_RESULT PACKETLOSSUTILS_POINTER_SIZE_TEST_COMPILE_RESULT "${PROJECT_BINARY_DIR}/testPointerSize" "${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_ptr_size.cpp" COMPILE_OUTPUT_VARIABLE PACKETLOSSUTILS_POINTER_SIZE_TEST_COMPILE_OUTPUT RUN_OUTPUT_VARIABLE PACKETLOSSUTILS_POINTER_SIZE_TEST_RUN_OUTPUT)
if (NOT ${PACKETLOSSUTILS_POINTER_SIZE_TEST_COMPILE_RESULT})
	message(FATAL_ERROR "Failed to compile pointer size testing program, please contact a developer! Extended Information: ${PACKETLOSSUTILS_POINTER_SIZE_TEST_COMPILE_OUTPUT}") 
elseif(${PACKETLOSSUTILS_POINTER_SIZE_TEST_RUN_RESULT} LESS 0 OR ${PACKETLOSSUTILS_POINTER_SIZE_TEST_RUN_RESULT} GREATER 0)
	message(FATAL_ERROR "Failed to run pointer size testing program, please contact a developer! Extended Information: ${PACKETLOSSUTILS_POINTER_SIZE_TEST_RUN_OUTPUT}") 
else()
	set(PACKETLOSSUTILS_CPP_POINTER_SIZE "${PACKETLOSSUTILS_POINTER_SIZE_TEST_RUN_OUTPUT}")
	message(STATUS "Collected pointer size information (pointer has ${PACKETLOSSUTILS_POINTER_SIZE_TEST_RUN_OUTPUT} Bits)")
endif()

# Configure a file to pass the PacketLossUtils version to the source code
configure_file (
	"${PROJECT_SOURCE_DIR}/Version.cpp.in"
	"${PROJECT_BINARY_DIR}/include/Version.cpp"
)

# Add the binary dir include directory
include_directories("${PROJECT_BINARY_DIR}/include")

include_directories("${PROJECT_SOURCE_DIR}/src/")

file(GLOB PACKETLOSSUTILS_HEADERS ${PROJECT_SOURCE_DIR}/src/*.h)
file(GLOB PACKETLOSSUTILS_SOURCES ${PROJECT_SOURCE_DIR}/src/*.cpp)

file(GLOB PACKETLOSSUTILS_EXCEPTIONS_HEADERS ${PROJECT_SOURCE_DIR}/src/exceptions/*.h)
file(GLOB PACKETLOSSUTILS_EXCEPTIONS_SOURCES ${PROJECT_SOURCE_DIR}/src/exceptions/*.cpp)

file(GLOB PACKETLOSSUTILS_NETWORK_HEADERS ${PROJECT_SOURCE_DIR}/src/network/*.h)
file(GLOB PACKETLOSSUTILS_NETWORK_SOURCES ${PROJECT_SOURCE_DIR}/src/network/*.cpp)

file(GLOB PACKETLOSSUTILS_USERS_HEADERS ${PROJECT_SOURCE_DIR}/src/users/*.h)
file(GLOB PACKETLOSSUTILS_USERS_SOURCES ${PROJECT_SOURCE_DIR}/src/users/*.cpp)

file(GLOB PACKETLOSSUTILS_UTILITY_HEADERS ${PROJECT_SOURCE_DIR}/src/utility/*.h)
file(GLOB PACKETLOSSUTILS_UTILITY_SOURCES ${PROJECT_SOURCE_DIR}/src/utility/*.cpp)

file(GLOB_RECURSE PACKETLOSSUTILS_RESOURCES ${PROJECT_SOURCE_DIR}/resources/*.qrc)
QT5_ADD_RESOURCES(PACKETLOSSUTILS_RESOURCESOURCES ${PACKETLOSSUTILS_RESOURCES})

file(GLOB_RECURSE PACKETLOSSUTILS_HEADERS_GENERATED ${PROJECT_BINARY_DIR}/include/*.h)
file(GLOB_RECURSE PACKETLOSSUTILS_SOURCES_GENERATED ${PROJECT_BINARY_DIR}/include/*.cpp)

# Group sources in IDE
source_group("Headers" FILES ${PACKETLOSSUTILS_HEADERS} ${PACKETLOSSUTILS_HEADERS_GENERATED})
source_group("Sources" FILES ${PACKETLOSSUTILS_SOURCES} ${PACKETLOSSUTILS_SOURCES_GENERATED})
source_group("Exceptions" FILES ${PACKETLOSSUTILS_EXCEPTIONS_HEADERS} ${PACKETLOSSUTILS_EXCEPTIONS_SOURCES})
source_group("Network" FILES ${PACKETLOSSUTILS_NETWORK_HEADERS} ${PACKETLOSSUTILS_NETWORK_SOURCES})
source_group("Users" FILES ${PACKETLOSSUTILS_USERS_HEADERS} ${PACKETLOSSUTILS_USERS_SOURCES})
source_group("Utility" FILES ${PACKETLOSSUTILS_UTILITY_HEADERS} ${PACKETLOSSUTILS_UTILITY_SOURCES})

# Add source to this project's executable.
add_executable (packetLossUtils 
	${PACKETLOSSUTILS_HEADERS_GENERATED} ${PACKETLOSSUTILS_SOURCES_GENERATED}
	${PACKETLOSSUTILS_HEADERS} ${PACKETLOSSUTILS_SOURCES}
	${PACKETLOSSUTILS_EXCEPTIONS_HEADERS} ${PACKETLOSSUTILS_EXCEPTIONS_SOURCES}
	${PACKETLOSSUTILS_NETWORK_HEADERS} ${PACKETLOSSUTILS_NETWORK_SOURCES}
	${PACKETLOSSUTILS_USERS_HEADERS} ${PACKETLOSSUTILS_USERS_SOURCES}
	${PACKETLOSSUTILS_UTILITY_HEADERS} ${PACKETLOSSUTILS_UTILITY_SOURCES}
	${PACKETLOSSUTILS_RESOURCESOURCES}
	${PROTO_SRCS} ${PROTO_HDRS}
)

target_link_libraries(packetLossUtils Qt5::Core Qt5::Network)

# TODO: Add tests and install targets if needed.
